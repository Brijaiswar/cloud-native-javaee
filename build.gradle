buildscript {
    ext {
    }
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

allprojects {
    apply plugin: 'com.bmuschko.docker-remote-api'

    docker {
        url = System.env.DOCKER_HOST ?: 'https://192.168.99.100:2376'
        certPath = file("${System.getProperty('user.home')}/.docker/machine/machines/default")

        registryCredentials {
            url = 'qaware-oss-docker-registry.bintray.io'
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'qaware-oss'
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : ''
            email = 'qaware-oss@qaware.de'
        }
    }

    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'com.github.hierynomus.license'

    license {
        skipExistingHeaders = true
        header rootProject.file('LICENSE')
        includes(["**/*.java", "**/*.groovy"])
        mapping {
            java = 'SLASHSTAR_STYLE'
            groovy = 'SLASHSTAR_STYLE'
        }
    }

    group = 'de.qaware.cloud.nativ.javaee'
    version = '1.0.0'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'org.mockito:mockito-core:1.10.19'

        testCompile 'org.codehaus.groovy:groovy-all:2.4.7'
        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-1'

        testRuntime 'cglib:cglib-nodep:3.2.4'
        testRuntime 'org.objenesis:objenesis:2.4'
        testRuntime 'com.athaydes:spock-reports:1.2.12'
    }

    test {
        reports {
            junitXml.enabled = false
            html.enabled = true
        }
    }
}

// configure Docker tasks for service projects
subprojects.findAll { it.name.endsWith('-service') }.each { p ->
    configure(p) {
        task buildDockerImage(type: DockerBuildImage) {
            inputDir = projectDir
            noCache = false
            remove = true
            tag = "$project.name:$version"
        }

        task removeDockerImage(type: DockerRemoveImage) {
            imageId = "$project.name:$version"
        }

        task pushDockerImage(type: DockerPushImage) {
            imageName = "qaware-oss-docker-registry.bintray.io/lreimer/$project.name:$version"
        }
    }
}

import com.bmuschko.gradle.docker.tasks.DockerInfo
import com.bmuschko.gradle.docker.tasks.DockerVersion
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

task dockerInfo(type: DockerInfo) {}
task dockerVersion(type: DockerVersion) {}
